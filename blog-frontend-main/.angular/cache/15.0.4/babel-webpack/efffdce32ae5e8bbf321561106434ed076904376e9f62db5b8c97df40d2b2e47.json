{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PostapiService {\n  constructor(http) {\n    this.http = http;\n    this.allPostURL = \"http://localhost:8080/api/blog/posts\";\n    this.signupURL = \"http://localhost:8080/api/blog/signup\";\n    this.loginURL = \"http://localhost:8080/api/blog/login\";\n    this.postsByCategoryURL = \"http://localhost:8080/api/blog/posts/\";\n    this.singlePostURL = \"http://localhost:8080/api/blog/post/\";\n    this.getCommentsURL = \"http://localhost:8080/api/blog/comment/\";\n    this.addCommentURL = \"http://localhost:8080/api/blog/comment/\";\n    this.addPostURL = \"http://localhost:8080/api/blog/post/\";\n    this.deletePostURL = \"http://localhost:8080/api/blog/post/\";\n    this.updatePostURL = \"http://localhost:8080/api/blog/post/\";\n    this.postsByUserIdURL = \"http://localhost:8080/api/blog/post/user/\";\n    this.getAllCommentsURL = \"http://localhost:8080/api/blog/comments\";\n    this.getCommentsByUserIdURL = \"http://localhost:8080/api/blog/comment/user/\";\n    this.deleteCommentByCommentIdURL = \"http://localhost:8080/api/blog/comment/\";\n    this.getCommentByCommentIdURL = \"http://localhost:8080/api/blog/getcomment/\";\n    this.updateCommentURL = \"http://localhost:8080/api/blog/comment/\";\n    this.getAllUsersURL = \"http://localhost:8080/api/blog/users\";\n    this.deteleUSerURL = \"http://localhost:8080/api/blog/user/\";\n    this.postSearchURL = \"http://localhost:8080/api/blog/post/search/\";\n  }\n  getAllPosts() {\n    return this.http.get(this.allPostURL);\n  }\n  signup(user) {\n    const headers = {\n      'content-type': 'application/json'\n    };\n    const body = JSON.stringify(user);\n    return this.http.post(this.signupURL, body, {\n      'headers': headers\n    });\n  }\n  signin(email, password) {\n    const params = new HttpParams().set('email', email).set('password', password);\n    console.log(params);\n    return this.http.get(this.loginURL, {\n      params\n    });\n  }\n  postsByCategory(categoryId) {\n    return this.http.get(this.postsByCategoryURL + categoryId);\n  }\n  getSinglePost(postId) {\n    return this.http.get(this.singlePostURL + postId);\n  }\n  getCommentsForPost(postId) {\n    return this.http.get(this.getCommentsURL + postId);\n  }\n  addComment(postId, userId, content) {\n    const headers = {\n      'content-type': 'application/json'\n    };\n    const body = JSON.stringify(content);\n    return this.http.post(this.addCommentURL + postId + '/' + userId, body, {\n      'headers': headers\n    });\n  }\n  addPost(postId, postTitle, content, image, categoryId, userId) {\n    const formData = new FormData();\n    formData.append(\"postId\", postId);\n    formData.append(\"postTitle\", postTitle);\n    formData.append(\"postContent\", content);\n    formData.append(\"postImage\", image);\n    formData.append(\"categoryId\", categoryId);\n    formData.append(\"userId\", userId);\n    return this.http.post(this.addPostURL, formData);\n  }\n  deletePost(postId) {\n    return this.http.delete(this.deletePostURL + postId);\n  }\n  updatePost(postId, postTitle, content, image, categoryId) {\n    const formData = new FormData();\n    formData.append(\"postId\", postId);\n    formData.append(\"postTitle\", postTitle);\n    formData.append(\"postContent\", content);\n    formData.append(\"postImage\", image);\n    formData.append(\"categoryId\", categoryId);\n    return this.http.put(this.updatePostURL, formData);\n  }\n  getPostsByUserId(userId) {\n    return this.http.get(this.postsByUserIdURL + userId);\n  }\n  getAllComments() {\n    return this.http.get(this.getAllCommentsURL);\n  }\n  getCommentsByUserId(userId) {\n    return this.http.get(this.getCommentsByUserIdURL + userId);\n  }\n  deleteCommentByCommentId(commentId) {\n    return this.http.delete(this.deleteCommentByCommentIdURL + commentId);\n  }\n  getCommentBycommentId(commentId) {\n    return this.http.get(this.getCommentByCommentIdURL + commentId);\n  }\n  updateComment(comment) {\n    const headers = {\n      'content-type': 'application/json'\n    };\n    const body = JSON.stringify(comment);\n    return this.http.put(this.updateCommentURL, body, {\n      'headers': headers\n    });\n  }\n  getAllUsers() {\n    return this.http.get(this.getAllUsersURL);\n  }\n  deleteUserById(userId) {\n    return this.http.delete(this.deteleUSerURL, userId);\n  }\n  getPostByTitle(title) {\n    const params = new HttpParams().set('postTitle', title);\n    return this.http.get(this.postSearchURL, {\n      params\n    });\n  }\n}\nPostapiService.ɵfac = function PostapiService_Factory(t) {\n  return new (t || PostapiService)(i0.ɵɵinject(i1.HttpClient));\n};\nPostapiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PostapiService,\n  factory: PostapiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpParams","PostapiService","constructor","http","getAllPosts","get","allPostURL","signup","user","headers","body","JSON","stringify","post","signupURL","signin","email","password","params","set","console","log","loginURL","postsByCategory","categoryId","postsByCategoryURL","getSinglePost","postId","singlePostURL","getCommentsForPost","getCommentsURL","addComment","userId","content","addCommentURL","addPost","postTitle","image","formData","FormData","append","addPostURL","deletePost","delete","deletePostURL","updatePost","put","updatePostURL","getPostsByUserId","postsByUserIdURL","getAllComments","getAllCommentsURL","getCommentsByUserId","getCommentsByUserIdURL","deleteCommentByCommentId","commentId","deleteCommentByCommentIdURL","getCommentBycommentId","getCommentByCommentIdURL","updateComment","comment","updateCommentURL","getAllUsers","getAllUsersURL","deleteUserById","deteleUSerURL","getPostByTitle","title","postSearchURL","factory","providedIn"],"sourceRoot":"","sources":["C:\\Edubridge-Final-project\\Main Project\\blog-frontend-main\\blog-frontend-main (1)\\blog-frontend-main\\src\\app\\service\\postapi.service.ts"],"sourcesContent":["import { HttpClient, HttpParams  } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Post } from '../model/Post';\nimport { User } from '../model/User';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PostapiService {\n\n  constructor(private http:HttpClient) { }\n  \n  allPostURL=\"http://localhost:8080/api/blog/posts\";\n  signupURL=\"http://localhost:8080/api/blog/signup\"; \n  loginURL=\"http://localhost:8080/api/blog/login\";   \n  postsByCategoryURL=\"http://localhost:8080/api/blog/posts/\";   \n  singlePostURL=\"http://localhost:8080/api/blog/post/\";\n  getCommentsURL=\"http://localhost:8080/api/blog/comment/\";  \n  addCommentURL=\"http://localhost:8080/api/blog/comment/\"; \n  addPostURL=\"http://localhost:8080/api/blog/post/\"; \n  deletePostURL=\"http://localhost:8080/api/blog/post/\"; \n  updatePostURL=\"http://localhost:8080/api/blog/post/\"; \n  postsByUserIdURL=\"http://localhost:8080/api/blog/post/user/\"; \n  getAllCommentsURL=\"http://localhost:8080/api/blog/comments\";\n  getCommentsByUserIdURL=\"http://localhost:8080/api/blog/comment/user/\";\n  deleteCommentByCommentIdURL=\"http://localhost:8080/api/blog/comment/\";\n  getCommentByCommentIdURL=\"http://localhost:8080/api/blog/getcomment/\";\n  updateCommentURL=\"http://localhost:8080/api/blog/comment/\";\n  getAllUsersURL=\"http://localhost:8080/api/blog/users\";\n  deteleUSerURL=\"http://localhost:8080/api/blog/user/\";\n  postSearchURL=\"http://localhost:8080/api/blog/post/search/\";\n  \n  getAllPosts():Observable<any>\n  {\n   return this.http.get(this.allPostURL);\n  }\n\n\n  signup(user:User):Observable<any>\n  {\n     const headers={'content-type':'application/json'};\n     const body=JSON.stringify(user);\n     return this.http.post(this.signupURL,body,{'headers':headers});\n  }\n \n  signin(email:any, password:any):Observable<any>\n  {\n    \n    const params=new HttpParams().set('email',email).set('password',password);\n    console.log(params);\n    return this.http.get(this.loginURL,{params});\n  }\n\n  postsByCategory(categoryId:any):Observable<any>\n  {\n    return this.http.get(this.postsByCategoryURL+categoryId);\n  \n  }\n\n  getSinglePost(postId:any):Observable<any>\n  {\n    return this.http.get(this.singlePostURL+postId);\n  }\n\n\n  getCommentsForPost(postId:any):Observable<any>\n  {\n    return this.http.get(this.getCommentsURL+postId);\n  }\n\n  addComment(postId:number,userId:number,content:any):Observable<any>\n  {\n    \n    const headers={'content-type':'application/json'};\n    const body=JSON.stringify(content);\n    return this.http.post(this.addCommentURL+postId+'/'+userId,body,{'headers':headers});\n  }\n\n  addPost(postId:any, postTitle:string, content:string, image:File,categoryId:any,userId:any):Observable<any>\n  {\n    const formData:FormData=new FormData();\n    formData.append(\"postId\",postId);\n    formData.append(\"postTitle\",postTitle);\n    formData.append(\"postContent\",content);\n    formData.append(\"postImage\",image);\n    formData.append(\"categoryId\",categoryId);\n    formData.append(\"userId\",userId);\n    return this.http.post(this.addPostURL,formData  );\n  }\n  deletePost(postId:any):Observable<any>\n  {\n    return this.http.delete(this.deletePostURL+postId);\n  }\n  updatePost(postId:any, postTitle:string, content:string, image:File,categoryId:any):Observable<any>\n  {\n    const formData:FormData=new FormData();\n    formData.append(\"postId\",postId);\n    formData.append(\"postTitle\",postTitle);\n    formData.append(\"postContent\",content);\n    formData.append(\"postImage\",image);\n    formData.append(\"categoryId\",categoryId);\n    \n    return this.http.put(this.updatePostURL,formData  );\n  }\n\n  getPostsByUserId(userId:any):Observable<any>\n  {\n   \n    return this.http.get(this.postsByUserIdURL+userId);\n  }\n\n\n  getAllComments():Observable<any>\n  {\n    return this.http.get(this.getAllCommentsURL);\n  }\n\n  getCommentsByUserId(userId:any):Observable<any>\n  {\n    return this.http.get(this.getCommentsByUserIdURL+userId);\n  }\n\n\n  deleteCommentByCommentId(commentId:any):Observable<any>\n  {\n    return this.http.delete(this.deleteCommentByCommentIdURL+commentId);\n  }\n\n  getCommentBycommentId(commentId:any):Observable<any>\n  {\n    return this.http.get(this.getCommentByCommentIdURL+commentId);\n  }\n\n  updateComment(comment:any):Observable<any>\n  {\n    const headers={'content-type':'application/json'};\n    const body=JSON.stringify(comment);\n    return this.http.put(this.updateCommentURL,body,{'headers':headers});\n  }\n\n  getAllUsers():Observable<any>\n  {\n    return this.http.get(this.getAllUsersURL);\n  }\n\n  deleteUserById(userId:any):Observable<any>\n  {\n    return this.http.delete(this.deteleUSerURL,userId);\n  }\n   \n  getPostByTitle(title:any):Observable<any>\n  {\n    const params = new HttpParams().set('postTitle', title);\n    return this.http.get(this.postSearchURL,{params})\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}